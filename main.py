import requests
import telebot
from telebot import types
from telebot.types import LabeledPrice, ShippingOption
import json
from binascii import a2b_base64

chat_id = []

bot = telebot.TeleBot('5493404497:AAH81m9wtOTlRKc-UsmFZRHgV7tpOBfIeos')


@bot.message_handler(commands=["start"])
def start(message, res=False):
    with open('users.json') as le:
        data = dict(json.load(le))
    if not str(message.chat.id) in data.keys():
        data[f'{message.chat.id}'] = {'all_positions': {},
                                      'total_price': 0,
                                      'delivery': ''}
        with open('users.json', 'w') as lv:
            json.dump(data, lv)

    print(message.chat.id)
    res = requests.get('https://serverfor10000.herokuapp.com/api/sorted_keys')
    # res = {'q': [',fyfys', '–∑–∞–±–æ—Ä—ã', '–¥–æ–º–∞', '–≥—Ä—É—à–∏']}
    categ = res.json()['q']
    print(categ)

    markup_category = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_category.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))

    for i in categ:
        markup_category.add(types.KeyboardButton(i))

    r = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup_category)

    bot.register_next_step_handler(r, caregory_check, categ)


markup_registration = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_r = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
markup_registration.add(btn_r)

markup_position = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_pos1 = types.KeyboardButton('\ud83d\udd39 \ud83d\uded2 –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É \ud83d\uded2 \ud83d\udd39')
btn_pos2 = types.KeyboardButton('\ud83d\udec2 –í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º \ud83d\udec2')
btn_pos3 = types.KeyboardButton('\ud83d\udec2 –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \ud83d\udec2')  # &#128259;     &#128260;
markup_position.add(btn_pos1)
markup_position.add(btn_pos2)
markup_position.add(btn_pos3)

markup_chek = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_chek = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É')
markup_chek.add(btn_chek)

markup_send = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_send1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
btn_send2 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
markup_send.add(btn_send1, btn_send2)

markup_admin = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1_admin = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
btn2_admin = types.KeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
markup_admin.add(btn2_admin, btn1_admin)


@bot.message_handler(content_types=["text"])
def func(message):
    if message.text == '\ud83d\udec2 –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \ud83d\udec2':
        start(message)

    if message.text == '$16pdKb#C3Z':
        with open('admins.json') as le:
            data = dict(json.load(le))
            data['admins'].append(str(message.chat.id))
        with open('users.json', 'w') as lv:
            json.dump(data, lv)


def caregory_check(message, categories):
    if message.text in categories:
        res = requests.get(f'https://serverfor10000.herokuapp.com/api/get_position/{message.text}').json()['position']

        # res = {'–ë–∞–Ω–∞–Ω': '32524545', '–ö–æ–ª–∞': '54345345', '–Ø–±–ª–æ–∫–∏': '5435', '–ß–∞–π': '234324', '–ñ–æ–ø–∞–∞': '534345', '–ö–µ—Ñ–∏—Ä': '234234234', '–°–æ–ª—å': '324234', '–ü–µ—Ä–µ—Ü': '543345', '–ù–æ–≥–∏': '545'}
        markup_position = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_position.add(types.KeyboardButton('\ud83d\udec2 –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \ud83d\udec2'))
        markup_position.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
        for i in res.keys():
            markup_position.add(types.KeyboardButton(i))
        r = bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–µ—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                             reply_markup=markup_position)
        bot.register_next_step_handler(r, position_chek, message, categories, res.keys())
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        basket(message)
    else:
        start(message)


def position_chek(message, old_message, cat, position):
    if message.text == 'üõÇ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üõÇ':
        start(message)
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        basket(message)
    elif message.text in position:
        res = \
        requests.get(f'https://serverfor10000.herokuapp.com/api/get_info/{old_message.text}/{message.text}').json()[
            'info']
        pos = res
        encoded = bytes(pos['photo'], encoding="raw_unicode_escape")
        encoded = encoded[2:-1]

        binary_data = a2b_base64(encoded)

        fd = open('img.jpg', 'wb')
        fd.write(binary_data)

        fd.close()

        pho = open("img.jpg", "rb")

        r = bot.send_photo(message.chat.id, pho, caption=pos['description'], reply_markup=markup_position)
        bot.register_next_step_handler(r, pos_check, message.text, pos, old_message, cat)
    else:
        caregory_check(old_message, cat)


def pos_check(message, name, info, old_message, cat):
    if message.text == 'üõÇ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º üõÇ':
        caregory_check(old_message, cat)
    elif message.text == 'üõÇ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üõÇ':
        start(message)
    elif message.text == 'üîπ üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí üîπ':
        markup_count = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_count.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ'))
        for i in range(1, 16, 2):
            markup_count.add(types.KeyboardButton("{}".format(i)), types.KeyboardButton(i + 1))

        r = bot.send_message(message.chat.id, '–í–≤–∏–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=markup_count)
        bot.register_next_step_handler(r, count_check, message, name, info, old_message, cat)
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        basket(message)
    else:
        caregory_check(old_message, cat)


def count_check(message, message_old, name, info, old_message, cat):
    if message.text == '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ':
        r = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(r, count_check, message_old, name, info, old_message, cat)
    elif not message.text.isdigit():
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
        pos_check(message_old, name, info, old_message, cat)

    elif message.text[0] == '0':
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
        pos_check(message_old, name, info, old_message, cat)

    else:
        with open('users.json') as le:
            data = dict(json.load(le))

        if name in data[f'{message.chat.id}']['all_positions']:
            data[f'{message.chat.id}']['all_positions'][name] = {'cost': info['cost'],
                                                                 'count':
                                                                     data[f'{message.chat.id}']['all_positions'][name][
                                                                         'count'] + int(message.text)}
        else:
            data[f'{message.chat.id}']['all_positions'][name] = {'cost': info['cost'],
                                                                 'count': int(message.text)}
        data[f'{message.chat.id}']['total_price'] += int(info['cost']) * int(message.text)
        with open('users.json', 'w') as lv:
            json.dump(data, lv)
            bot.send_message(message.chat.id, text='–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
            caregory_check(old_message, cat)


markup_basket = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_basket.add(types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
markup_basket.add(types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å'))
markup_basket.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))


def basket(message):
    with open('users.json') as le:
        data = dict(json.load(le))
    pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
    string = ''
    for i in pos:
        string += f'{i}: {data[str(message.chat.id)]["all_positions"][i]["cost"]} √ó {data[str(message.chat.id)]["all_positions"][i]["count"]}\n'
    string += f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data[str(message.chat.id)]["total_price"]}'

    r = bot.send_message(message.chat.id, string, reply_markup=markup_basket)
    bot.register_next_step_handler(r, check_order)


markup_editor = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_editor.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'))
markup_editor.add(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é'))
markup_editor.add(types.KeyboardButton('–û—Ç—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
markup_editor.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))


def check_order(message):
    if message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        r = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–∏ –æ–ø—Ü–∏—é', reply_markup=markup_editor)
        bot.register_next_step_handler(r, edit_order)
    elif message.text == '–ó–∞–∫–∞–∑–∞—Ç—å':
        with open('users.json') as le:
            data = dict(json.load(le))
        if int(data[str(message.chat.id)]['total_price']) < 65:
            bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
            basket(message)
        else:
            delivery(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        basket(message)


def edit_order(message):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
        with open('users.json') as le:
            data = dict(json.load(le))
        pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
        markup_pos = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in pos:
            markup_pos.add(i)
        r = bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                             reply_markup=markup_pos)
        bot.register_next_step_handler(r, change_count_1, pos)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é':
        with open('users.json') as le:
            data = dict(json.load(le))
        pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
        markup_pos = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in pos:
            markup_pos.add(i)
        r = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                             reply_markup=markup_pos)
        bot.register_next_step_handler(r, delete_position, pos)

    elif message.text == '–û—Ç—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        with open('users.json') as le:
            data = dict(json.load(le))
            data[f'{message.chat.id}'] = {'all_positions': {},
                                          'total_price': 0}
        with open('users.json', 'w') as lv:
            json.dump(data, lv)
        bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞')
        start(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        basket(message)


def delete_position(message, positions):
    if message.text in positions:
        with open('users.json') as le:
            data = dict(json.load(le))
        data[str(message.chat.id)]['total_price'] -= data[str(message.chat.id)]['all_positions'][message.text]['cost'] * \
                                                     data[str(message.chat.id)]['all_positions'][message.text]['count']
        del data[str(message.chat.id)]['all_positions'][message.text]
        with open('users.json', 'w') as lv:
            json.dump(data, lv)
        bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã')
        basket(message)
    else:
        basket(message)


def change_count_1(message, pos):
    if message.text in pos:
        r = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(r, change_count, message, pos)
    else:
        basket(message)


def change_count(message, name, pos):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
        change_count_1(name, pos)
    else:
        with open('users.json') as le:
            data = dict(json.load(le))
        data[str(message.chat.id)]['total_price'] -= data[str(message.chat.id)]['all_positions'][name.text]['cost'] * \
                                                     data[str(message.chat.id)]['all_positions'][name.text]['count']
        data[str(message.chat.id)]['all_positions'][name.text]['count'] = int(message.text)
        data[str(message.chat.id)]['total_price'] += data[str(message.chat.id)]['all_positions'][name.text]['cost'] * \
                                                     data[str(message.chat.id)]['all_positions'][name.text]['count']
        with open('users.json', 'w') as lv:
            json.dump(data, lv)
        bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã')
        basket(message)


markup_deliviry = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_deliviry.add(types.KeyboardButton('–°–∞–º–æ–≤—ã–≤–æ–∑'))
markup_deliviry.add(types.KeyboardButton('–î–æ—Å—Ç–∞–≤–∫–∞'))


def delivery(message):
    with open('users.json') as le:
        data = dict(json.load(le))
    res = requests.get('https://serverfor10000.herokuapp.com/api/get_porog').json()['porog']
    if int(data[str(message.chat.id)]['total_price']) >= int(res):
        r = bot.send_message(message.chat.id,
                             '–¢–∞–∫ –∫–∞–∫ —Å—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–π, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
                             reply_markup=markup_deliviry)
        bot.register_next_step_handler(r, dostavka, True)
    else:
        r = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=markup_deliviry)
        bot.register_next_step_handler(r, dostavka, False)


def dostavka(message, win):
    if not win:
        if message.text == '–°–∞–º–æ–≤—ã–≤–æ–∑':
            res = requests.get('https://serverfor10000.herokuapp.com/api/get_samdelivery').json()['samdelivery']
            bot.send_message(message.chat.id, f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {res}.')
            with open('users.json') as le:
                data = dict(json.load(le))
            data[f'{message.chat.id}']['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞'] = {'cost': res,
                                                                       'count': 1}
            data[f'{message.chat.id}']['total_price'] += int(res)
            data[str(message.chat.id)]['delivery'] = 'sam'
            with open('users.json', 'w') as lv:
                json.dump(data, lv)

            pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
            string = ''
            for i in pos:
                string += f'{i}: {data[str(message.chat.id)]["all_positions"][i]["cost"]} √ó {data[str(message.chat.id)]["all_positions"][i]["count"]}\n'
            string += f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data[str(message.chat.id)]["total_price"]}'
            bot.send_message(message.chat.id, string)
            invalid_dostavka(message)
        elif message.text == '–î–æ—Å—Ç–∞–≤–∫–∞':
            res = requests.get('https://serverfor10000.herokuapp.com/api/get_delivery').json()['delivery']
            bot.send_message(message.chat.id, f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {res}.')
            with open('users.json') as le:
                data = dict(json.load(le))
            data[f'{message.chat.id}']['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞'] = {'cost': res,
                                                                       'count': 1}
            data[f'{message.chat.id}']['total_price'] += int(res)
            data[str(message.chat.id)]['delivery'] = 'nesam'
            with open('users.json', 'w') as lv:
                json.dump(data, lv)

            pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
            string = ''
            for i in pos:
                string += f'{i}: {data[str(message.chat.id)]["all_positions"][i]["cost"]} √ó {data[str(message.chat.id)]["all_positions"][i]["count"]}\n'
            string += f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data[str(message.chat.id)]["total_price"]}'
            bot.send_message(message.chat.id, string)
            invalid_dostavka(message)

        else:
            basket(message)
    else:
        with open('users.json') as le:
            data = dict(json.load(le))
        data[f'{message.chat.id}']['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞'] = {'cost': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
                                                                   'count': 1}
        if message.text == '–°–∞–º–æ–≤—ã–≤–æ–∑':
            data[str(message.chat.id)]['delivery'] = 'sam'
            with open('users.json', 'w') as lv:
                json.dump(data, lv)
            invalid_dostavka(message)
        elif message.text == '–î–æ—Å—Ç–∞–≤–∫–∞':
            data[str(message.chat.id)]['delivery'] = 'nesam'
            with open('users.json', 'w') as lv:
                json.dump(data, lv)
            invalid_dostavka(message)
        else:
            basket(message)


markup_invalid = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_invalid.add(types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å'))
markup_invalid.add(types.KeyboardButton('–†–∞–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'))


def invalid_dostavka(message):
    r = bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç', reply_markup=markup_invalid)
    bot.register_next_step_handler(r, super_invalid)


def super_invalid(message):
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å':
        buy(message.chat.id)
    else:
        with open('users.json') as le:
            data = dict(json.load(le))
        data[str(message.chat.id)]['delivery'] = ''
        price = data[str(message.chat.id)]['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞']['cost']
        if price == '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ':

            del data[str(message.chat.id)]['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞']
        else:
            data[str(message.chat.id)]['total_price'] -= price
            del data[str(message.chat.id)]['delivery']['all_positions']['–î–æ—Å—Ç–∞–≤–∫–∞']

        with open('users.json', 'w') as lv:

            json.dump(data, lv)
        basket(message)


def buy(chat_id):
    with open('users.json') as le:
        data = dict(json.load(le))
    count = data[str(chat_id)]['total_price']
    dostavka = data[str(chat_id)]['delivery']
    count *= 100
    provider_token = '381764678:TEST:39367'  # @BotFather -> Bot Settings -> Payments
    prices = [LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ –ó–∞–∫–∞–∑–∞", amount=count)]
    if dostavka == 'sam':
        bot.send_invoice(
            chat_id,  # chat_id
            '–û–ø–ª–∞—Ç–∞',  # title
            f'–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å',  # description
            f'Ok',  # invoice_payload
            provider_token,  # provider_token
            'rub',  # currency
            prices,  # prices  # True If you need to set up Shipping Fee
            start_parameter='bot_invoice',
            need_phone_number=True,
            need_email=True,
            need_name=True,
            is_flexible=False)
    if dostavka == 'nesam':
        bot.send_invoice(
            chat_id,  # chat_id
            '–û–ø–ª–∞—Ç–∞',  # title
            f'–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å',  # description
            f'Ok',  # invoice_payload
            provider_token,  # provider_token
            'rub',  # currency
            prices,  # prices  # True If you need to set up Shipping Fee
            start_parameter='bot_invoice',
            need_phone_number=True,
            need_email=True,
            need_name=True,
            is_flexible=False,
            need_shipping_address=True)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è'")


@bot.message_handler(content_types=['successful_payment'])
def buy_horosho(message):
    with open('admins.json') as le:
        data = dict(json.load(le))
    admins = data['admins']
    with open('users.json') as le:
        data = dict(json.load(le))
    pos = [x for x in data[str(message.chat.id)]["all_positions"].keys()]
    string = ''
    for i in pos:
        string += f'{i}: {data[str(message.chat.id)]["all_positions"][i]["cost"]} √ó {data[str(message.chat.id)]["all_positions"][i]["count"]}\n'
    string += f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data[str(message.chat.id)]["total_price"]}'
    bot.send_message(message.chat.id, string)
    for i in admins:
        bot.send_message(int(i), string)
    with open('users.json') as le:
        data = dict(json.load(le))
        data[f'{message.chat.id}'] = {'all_positions': {},
                                      'total_price': 0}
    with open('users.json', 'w') as lv:
        json.dump(data, lv)
    bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞')
    start(message)


bot.polling(none_stop=True, interval=0)
